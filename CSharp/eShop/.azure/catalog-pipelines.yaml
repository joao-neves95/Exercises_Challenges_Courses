trigger:
  branches:
    include:
      - main
  paths:
      include:
      - src/Services/Catalog/*
      - k8s/services/eshop.catalog_deployment.yaml
      - k8s/services/eshop.catalog_service.yaml

variables:
  - name: serviceName
    value: "Catalog"
  - name: projectFolder
    value: "src/Services/Catalog/eShop.Catalog.Api"
  - name: projectNamespace
    value: "eShop.Catalog.Api"
  - name: dotnetSdkVersion
    value: "6.x"
  - name: containerRegistry
    value: "Docker Hub"
  - name: containerRegistryServiceConnection
    value: dockerRegistryServiceConnection
  - name: containerRegistryUsername
    value: "joaoneves95"
  - name: imageTag
    value: "latest"

pool:
  vmImage: "ubuntu-latest"

# Stages are collections of logically related/grouped jobs.
stages:
- stage: Build
  jobs:
  # Jobs are a collection of steps.
  - job: Build
    # Steps are a linear sequence of (synchronous) operations.
    steps:
    - task: UseDotNet@2
      displayName: -- Setup .NET SDK v ${{ variables.dotnetSdkVersion }}
      inputs:
        version: ${{ variables.dotnetSdkVersion }}
        includePreviewVersions: true
    - task: DotNetCoreCLI@2
      displayName: -- Restore ${{ variables.serviceName }} project
      inputs:
        command: 'restore'
        projects: ${{ variables.projectFolder }}/${{ variables.projectNamespace }}.csproj
    - task: DotNetCoreCLI@2
      displayName: -- Build ${{ variables.serviceName }} project
      inputs:
        command: "build"
        arguments: "--no-restore"
        projects: ${{ variables.projectFolder }}/${{ variables.projectNamespace }}.csproj

- stage: Test
  dependsOn: Build
  jobs:
  # Jobs in a stage run in parallel.
  - job: UnitTests
    steps:
    # (simulate)
    - script: echo "All unit tests have passed."
  - job: ComponentTests
    steps:
    # (simulate)
    - script: echo "All component tests have passed."

- stage: BuildAndPushDockerImage
  dependsOn: Test
  jobs:
  - job: BuildAndPush
    steps:
    - task: Docker@2
      displayName: Login to ${{ variables.containerRegistry }}
      inputs:
        command: login
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
    - task: Docker@2
      displayName: 'Build and Push'
      inputs:
        command: 'buildAndPush'
        containerRegistry: ${{ variables.containerRegistryServiceConnection }}
        Dockerfile: '${{ variables.projectFolder }}/Dockerfile'
        buildContext: .
        repository: '${{ variables.containerRegistryServiceConnection }}/${{ variables.projectNamespace }}'
        tags: ${{ variables.imageTag }}
    - publish: k8s
      artifact: k8s

- stage: Deploy
  dependsOn: BuildAndPushDockerImage
  environment: 'aspnetrunrundevops.default'
  strategy:
    runOnce:
      deploy:
        steps:
        - task: KubernetesManifest@0
          displayName: Deploy to Kubernetes cluster
          inputs:
            action: deploy
            manifests: |
              $(Pipeline.Workspace)/k8s/services/eshop.catalog_deployment.yaml
              $(Pipeline.Workspace)/k8s/services/eshop.catalog_service.yaml
            containers: |
              ${{ variables.containerRegistryServiceConnection }}/${{ variables.projectNamespace }}:${{ variables.imageTag }}
