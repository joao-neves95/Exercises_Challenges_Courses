trigger:
  branches:
    include:
    - main
  paths:
    include:
    - .azure/basket-pipeline.yaml
    - src/Services/Basket/*
    - k8s/services/eshop.basket_deployment.yaml
    - k8s/services/eshop.basket_service.yaml
    - k8s/shared/eshop.shared.rabbitmq_deployment.yaml
    - k8s/shared/eshop.shared.rabbitmq_service.yaml

variables:
  - name: serviceName
    value: "Basket"
  - name: projectFolder
    value: "src/Services/Basket/eShop.Basket.Api"
  - name: projectNamespace
    value: "eShop.Basket.Api"
  - name: dotnetSdkVersion
    value: "6.x"
  - name: containerRegistry
    value: "Docker Hub"
  - name: containerRegistryConnectionName
    value: dockerRegistryServiceConnection
  - name: containerRegistryUsername
    value: "joaoneves95"
  - name: imageTags
    value: |
      latest
      $(Build.BuildId)
  - name: k8sConnectionType
    value: "azureResourceManager"
  - name: k8sSubscriptionConnectionName
    value: azureSubscriptionConnection
  - name: azureResourceGroupName
    value: "eShop"
  - name: k8sClusterName
    value: "eShopCluster"
  - name: k8sNamespace
    value: "default"

pool:
  vmImage: "ubuntu-latest"

# Stages are collections of logically related/grouped jobs.
stages:
- stage: Build
  jobs:
  # Jobs are a collection of steps.
  - job: Build
    # Steps are a linear sequence of (synchronous) operations.
    steps:
    - task: UseDotNet@2
      displayName: -- Setup .NET SDK v ${{ variables.dotnetSdkVersion }}
      inputs:
        version: ${{ variables.dotnetSdkVersion }}
        includePreviewVersions: true
    - task: DotNetCoreCLI@2
      displayName: -- Restore ${{ variables.serviceName }} project
      inputs:
        command: 'restore'
        projects: ${{ variables.projectFolder }}/${{ variables.projectNamespace }}.csproj
    - task: DotNetCoreCLI@2
      displayName: -- Build ${{ variables.serviceName }} project
      inputs:
        command: "build"
        arguments: "--no-restore"
        projects: ${{ variables.projectFolder }}/${{ variables.projectNamespace }}.csproj

- stage: Test
  dependsOn: Build
  jobs:
  # Jobs in a stage run in parallel.
  - job: UnitTests
    steps:
    # (simulate)
    - script: echo "All unit tests have passed."
  - job: ComponentTests
    steps:
    # (simulate)
    - script: echo "All component tests have passed."

- stage: BuildAndPushDockerImage
  dependsOn: Test
  jobs:
  - job: BuildAndPush
    steps:
    - task: Docker@2
      displayName: Login to ${{ variables.containerRegistry }}
      inputs:
        command: login
        containerRegistry: ${{ variables.containerRegistryConnectionName }}
    - task: Docker@2
      displayName: 'Build and Push'
      inputs:
        command: 'buildAndPush'
        containerRegistry: ${{ variables.containerRegistryConnectionName }}
        Dockerfile: '${{ variables.projectFolder }}/Dockerfile'
        buildContext: .
        repository: '${{ variables.containerRegistryUsername }}/${{ variables.projectNamespace }}'
        tags: ${{ variables.imageTags }}
    - publish: k8s
      artifact: k8s

- stage: Deploy
  dependsOn: BuildAndPushDockerImage
  jobs:
  - job: DeployToKubernetes
    displayName: Deploy to managed Kubernetes cluster
    steps:
    - download: current
      displayName: 'Download artifacts (K8s manifests)'
      artifact: k8s
    - task: KubernetesManifest@1
      displayName: Deploy to Kubernetes cluster
      condition: succeeded()
      inputs:
        action: deploy
        manifests: |
          $(Pipeline.Workspace)/k8s/services/eshop.basket_deployment.yaml
          $(Pipeline.Workspace)/k8s/services/eshop.basket_service.yaml
          $(Pipeline.Workspace)/k8s/shared/eshop.shared.rabbitmq_deployment.yaml
          $(Pipeline.Workspace)/k8s/shared/eshop.shared.rabbitmq_service.yaml
          $(Pipeline.Workspace)/k8s/configmap.yaml
          $(Pipeline.Workspace)/k8s/secrets.yaml
        containers: |
          ${{ variables.containerRegistryConnectionName }}/${{ variables.projectNamespace }}:${{ variables.imageTag }}
        connectionType: ${{ variables.k8sConnectionType }}
        azureSubscriptionEndpoint: ${{ variables.k8sSubscriptionConnectionName }}
        azureResourceGroup: ${{ variables.azureResourceGroupName }}
        kubernetesCluster: ${{ variables.k8sClusterName }}
        useClusterAdmin: true
        namespace: ${{ variables.k8sNamespace }}
